blueprint:
  name: Daily briefing
  source_url: "n/a"
  description: "Daily briefing of different calendars."
  author: emackinnon1
  domain: automation
  input:
    notify_time:
      name: Notification time
      description: Time the automation is triggered to send the notification.
      selector:
        time: {}
      default: 07:00:00
    calendar_number:
      name: How many calendars do you want to use?
      description: Select the number 
      default: one
      selector:
        select:
          options:
          - label: '1'
            value: one
          - label: '2'
            value: two
          - label: '3'
            value: three
          multiple: false
          custom_value: false    
    calendar_entity_1:
      name: First Calendar
      description: The first calendar entity to use for finding upcoming calendar events.
      default: []
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - calendar
    calendar_entity_2:
      name: Second Calendar
      description: The second calendar entity to use for finding upcoming calendar events.
      default: []
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - calendar
    calendar_entity_3:
      name: Third Calendar
      description: The third calendar entity to use for finding upcoming calendar events.
      default: []
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - calendar
    calendar_duration:
      name: Calendar event duration
      description: How many hours ahead to look for upcoming calendar events.
      selector:
        duration:
      default:
        hours: 18
    weather_entity:
      name: Weather entity
      description: The weather entity to use for upcoming weather forecast.
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - weather
    zone_entity:
      name: Home zone entity
      description:
        The zone entity to use to determine approximate location for understanding
        typical weather.
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - zone
    notify_number:
      name: How many notify services do you want to use?
      description: Select the number 
      default: one
      selector:
        select:
          options:
          - label: '1'
            value: one
          - label: '2'
            value: two
          - label: '3'
            value: three
          multiple: false
          custom_value: false
    notify_service_1:
      name: First Notify service name
      description:
        The name of the first notify service where the notification should be
        sent.
      selector:
        text: {}
      default: notify.notify_1
    notify_service_2:
      name: Second Notify service name
      description:
        The name of the second notify service where the notification should be
        sent.
      selector:
        text: {}
      default: notify.notify_2
    notify_service_3:
      name: Third Notify service name
      description:
        The name of the third notify service where the notification should be
        sent.
      selector:
        text: {}
      default: notify.notify_3
    conversation_agent:
      name: Conversation agent
      description: |-
        The conversation agent to use for generating the notification text.
        This should be a OpenAI conversation agent for this Blueprint to work.
      selector:
        conversation_agent:
    prompt:
      name: Conversation agent prompt
      selector:
        text:
          multiline: true
          type: text
      default: |-
        Please generate text for a notification that will be sent to the users smartphone with helpful information.

        You are a helpful personal agent that generates text for the user:
        - Your answers are helpful, friendly, warm, insightful.
        - Your answers are not technical, and do not include Home Assistant internal details such as entities in responses.
        - Your messages help the user prepare for their day, for example:
          - Each calendar belongs to a different person, use the calendar name to refer to them, provide individual recommendations for each calendar, and make special remarks if some events match in time and the title or description makes a mention between calendars
          - Making note of unusual weather for the location and time of year (but not mundane details like "0% chance of precipitation")
          - How much time remaining until their first meeting
          - Anything that may be special or unique, such as celebrating a birthday
    

trigger:
  platform: time
  at: !input notify_time

action:
  - variables:
      weather_entity: !input weather_entity
      calendar_number: !input calendar_number
      calendar_entity_1: !input calendar_entity_1
      calendar_entity_2: !input calendar_entity_2
      calendar_entity_3: !input calendar_entity_3
      notify_number: !input notify_number
      zone_entity: !input zone_entity
      calendar_duration: !input calendar_duration
      prompt: !input prompt
  - alias: Fetch First Calendar Agenda
    service: calendar.list_events
    data:
      duration: !input calendar_duration
    target:
      entity_id: !input calendar_entity_1
    response_variable: agenda_1
  - if:
      - condition: template
        value_template: '{{ (calendar_number == ''two'') or (calendar_number == ''three'') }}'
    then:
      - alias: Fetch Second Calendar Agenda
        service: calendar.list_events
        data:
          duration: !input calendar_duration
        target:
          entity_id: !input calendar_entity_2
        response_variable: agenda_2
  - if:
      - condition: template
        value_template: '{{ calendar_number == ''three''}}'
    then:
      - alias: Fetch Third Calendar Agenda
        service: calendar.list_events
        data:
          duration: !input calendar_duration
        target:
          entity_id: !input calendar_entity_3
        response_variable: agenda_3  
  - alias: "Conversation Agent Notification Text"
    service: conversation.process
    data:
      text: |-
        Time: {{ now() }}
        {%- if zone_entity is defined %}
        Latitude: {{ state_attr(zone_entity, 'latitude') | round(1) }}
        Longitude: {{ state_attr(zone_entity, 'longitude') | round(1) }}
        {% endif %}
        
        {%- if weather_entity is defined %}
        {%- set forecast = state_attr(weather_entity, 'forecast')[0] %}
        {%- set temperature_unit = state_attr(weather_entity, 'temperature_unit') -%}
        Weather: {{ forecast.condition }} ({{ forecast.temperature }}{{ temperature_unit }}, {{ forecast.precipitation }}% precipitation)
        {%- endif %}
        
        
        Calendar "{{ state_attr(calendar_entity_1, 'friendly_name') }}" events for the next {{ calendar_duration.hours }} hours:
        {%- if agenda_1.events %}
          {%- for event in agenda_1.events %}
          - Summary: {{ event.summary }}
            Start-End: {% if event.start is defined %}{{ event.start }} to {{ event.end }}{% else %}All Day{% endif %}
            {%- if event.description is defined %}
            Description: {{ event.description }}
            {% endif -%}
            {%- if event.location is defined %}
              Location: {{ event.location }}
            {% endif -%}
          {%- endfor %}
        {%- else %}
          - No upcoming events.
        {%- endif %}
       
        {%- if (calendar_number == "two") or (calendar_number == "three") %}
        Calendar "{{ state_attr(calendar_entity_2, 'friendly_name') }}" events for the next {{ calendar_duration.hours }} hours:
          {%- if agenda_2.events %}
            {%- for event in agenda_2.events %}
            - Summary: {{ event.summary }}
              Start-End: {% if event.start is defined %}{{ event.start }} to {{ event.end }}{% else %}All Day{% endif %}
              {%- if event.description is defined %}
              Description: {{ event.description }}
              {% endif -%}
              {%- if event.location is defined %}
                Location: {{ event.location }}
              {% endif -%}
            {%- endfor %}
          {%- else %}
            - No upcoming events.
          {%- endif %}
        {%- endif %}

        {%- if (calendar_number == "three") %}
        Calendar "{{ state_attr(calendar_entity_3, 'friendly_name') }}" events for the next {{ calendar_duration.hours }} hours:
          {%- if agenda_3.events %}
            {%- for event in agenda_3.events %}
            - Summary: {{ event.summary }}
              Start-End: {% if event.start is defined %}{{ event.start }} to {{ event.end }}{% else %}All Day{% endif %}
              {%- if event.description is defined %}
              Description: {{ event.description }}
              {% endif -%}
              {%- if event.location is defined %}
                Location: {{ event.location }}
              {% endif -%}
            {%- endfor %}
          {%- else %}
            - No upcoming events.
          {%- endif %}
        {%- endif %}

        {{ prompt }}
      agent_id: !input conversation_agent
    response_variable: agent
  - alias: "Send notification"
    service: !input notify_service_1
    data:
      title: "{{ now().strftime('%A') }} Agenda"
      message: "{{ agent.response.speech.plain.speech }}"
  - if:
      - condition: template
        value_template: '{{ (notify_number == ''two'') or (notify_number == ''three'') }}'
    then:
      - alias: "Send notification"
        service: !input notify_service_2
        data:
          title: "{{ now().strftime('%A') }} Agenda"
          message: "{{ agent.response.speech.plain.speech }}"
  - if:
      - condition: template
        value_template: '{{ notify_number == ''three''}}'
    then:
      - alias: "Send notification"
        service: !input notify_service_3
        data:
          title: "{{ now().strftime('%A') }} Agenda"
          message: "{{ agent.response.speech.plain.speech }}"
  

      
# - trigger:
#   - platform: time_pattern
#     hours: /1
# action:
# - service: calendar.get_events
# data:
# start_date_time: '{{ now().date() }} 00:00:00'
# end_date_time: '{{ now().date() }} 23:59:59'
# target:
# entity_id:
# - calendar.yyyy_gaming
# - calendar.yyyy_guest
# - calendar.yyyy_vacation
# - calendar.yyyy_personal
# - calendar.yyyy_appointments
# - calendar.xxxx_gaming
# - calendar.xxxx_vacations
# - calendar.xxxx_main
# - calendar.xxxx_appointments
# - calendar.
# - calendar.exercise
# response_variable: calendar
# - variables:
# e: |
# {% set ns = namespace(cal_events=[]) %}
# {%- for key, value in calendar.items() %}
# {%- for event in value.events %}
# {%- set ns.cal_events = ns.cal_events + [event] %}
# {%- endfor %}
# {%- endfor %}
# {{ ns.cal_events | sort(attribute='start') | list }}
# sensor:
# - name: Calendar Events Today
# unique_id: calendar_events_today
# state: "{{ now().isoformat() }}"
# attributes:
# events: "{{ e }}"

# In my morning briefing script:
# service: notify.alexa_media_bedroom
# metadata: {}
# data:
# message: >-
# {{ forecast }}
# {% if not state_attr('sensor.calendar_events_today',
# 'events') -%}
# You have nothing on your calendar for today.
# {%- else -%}
# {%- for attribute in state_attr('sensor.calendar_events_today','events') -%}
# {%- set start_time = as_timestamp(attribute.start) | timestamp_custom('%-I:%M%p', true) %}
# {%- set summary = attribute.summary %}
# At {{ start_time }} you have {{ summary }}.
# {%- endfor %}
# {%- endif %}
data:
type: tts
target:
- media_player.bedroom
